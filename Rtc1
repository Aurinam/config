


I am using hw111 tiny RTC module with raspberry Pi 4. How to read from and write to the 
The HW-111 Tiny RTC module is commonly used with microcontrollers like the Raspberry Pi via the I2C interface. Here's how you can read from and write to the RTC using I2C:

1. Wiring the HW-111 to the Raspberry Pi
Connect the module to the Raspberry Pi as follows:

RTC Pin	Raspberry Pi Pin	Description
VCC	3.3V (Pin 1)	Power supply
GND	GND (Pin 6)	Ground
SDA	GPIO2 (Pin 3)	I2C Data Line
SCL	GPIO3 (Pin 5)	I2C Clock Line
Note: Ensure your HW-111 module can run at 3.3V to avoid damaging the Raspberry Pi.

2. Enable I2C on Raspberry Pi
Open the Raspberry Pi configuration tool:
sudo raspi-config
Go to Interface Options > I2C > Enable.
Reboot your Raspberry Pi:
sudo reboot
3. Install I2C Tools
Install the necessary tools to interact with I2C devices:

sudo apt update
sudo apt install -y i2c-tools python3-smbus
4. Verify I2C Connection
Check if the RTC is detected on the I2C bus:

i2cdetect -y 1
You should see a hexadecimal address for the RTC, commonly 0x68.

5. Read and Write RTC using Python
Use the smbus






You said:
I am using hw111 tiny RTC module with raspberry Pi 4. How to read from and write to the rtc using i2c
ChatGPT said:
ChatGPT
To interact with the HW-111 Tiny RTC module on a Raspberry Pi 4 via I2C, follow these steps:

1. Connect the RTC Module to the Raspberry Pi
Wire the RTC module to the Raspberry Pi's GPIO pins:

RTC Pin	Raspberry Pi Pin	Description
VCC	3.3V (Pin 1)	Power (if 3.3V compatible, else use 5V with level shifter)
GND	GND (Pin 6)	Ground
SDA	GPIO2 (Pin 3)	I2C Data Line
SCL	GPIO3 (Pin 5)	I2C Clock Line
2. Enable I2C on Raspberry Pi
Open the Raspberry Pi configuration tool:
sudo raspi-config
Go to Interface Options > I2C and enable it.
Reboot the Raspberry Pi:
sudo reboot
3. Install Required Tools and Libraries
Install the necessary packages to work with I2C:

sudo apt update
sudo apt install -y i2c-tools python3-smbus
4. Verify I2C Device
Run the following command to check if the RTC module is detected:

i2cdetect -y 1
You should see the RTC module's address, commonly 0x68.

5. Reading and Writing to the RTC Using Python
The HW-111 uses a DS1307 or DS3231 chip. You can use the smbus2 library to interact with it. Install it if needed:

pip install smbus2
Reading the Time
Here’s a script to read the time from the RTC:

import smbus2
import time

# I2C setup
I2C_BUS = 1
RTC_ADDRESS = 0x68

bus = smbus2.SMBus(I2C_BUS)

def bcd_to_dec(bcd):
    return (bcd & 0x0F) + ((bcd >> 4) * 10)

def read_time():
    data = bus.read_i2c_block_data(RTC_ADDRESS, 0x00, 7)
    seconds = bcd_to_dec(data[0] & 0x7F)
    minutes = bcd_to_dec(data[1])
    hours = bcd_to_dec(data[2] & 0x3F)
    day = bcd_to_dec(data[3])
    date = bcd_to_dec(data[4])
    month = bcd_to_dec(data[5])
    year = bcd_to_dec(data[6]) + 2000

    print(f"Time: {hours:02}:{minutes:02}:{seconds:02}")
    print(f"Date: {year}-{month:02}-{date:02} (Day {day})")

read_time()
Setting the Time
Here’s how to write a new time to the RTC:

def dec_to_bcd(dec):
    return (dec // 10 << 4) + (dec % 10)

def set_time():
    seconds = dec_to_bcd(0)
    minutes = dec_to_bcd(30)
    hours = dec_to_bcd(15)  # 24-hour format
    day = dec_to_bcd(3)  # 1 = Monday, 7 = Sunday
    date = dec_to_bcd(28)
    month = dec_to_bcd(11)
    year = dec_to_bcd(24)  # Last two digits of the year

    data = [seconds, minutes, hours, day, date, month, year]
    bus.write_i2c_block_data(RTC_ADDRESS, 0x00, data)
    print("Time set successfully!")

set_time()
6. Automate the RTC for System Time
If you want the RTC to set the Raspberry Pi's system time:

Install the hwclock tools:
sudo apt install -y ntpdate
Add the RTC to the system’s hardware clock:
sudo hwclock -w
sudo hwclock -r
Let me know if you need further clarification!







